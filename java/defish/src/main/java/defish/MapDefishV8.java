package defish;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.file.Files;
import java.util.*;

/**
 * HemiCloneLite — Fisheye Hemi style warp using embedded landmark pairs.
 *
 * This build is self contained: it takes only INPUT and OUTPUT image paths.
 * The landmark pairs (src.xn/src.yn to dst.xn/dst.yn) are embedded below,
 * extracted from hemi_pairs_384.json (created_at 2025-09-04T02:16:12.773735600Z).
 *
 * Usage:
 *   javac HemiCloneLite.java
 *   java HemiCloneLite input.jpg output.png
 *
 * Notes:
 *  - Output keeps input size. Background outside source is edge clamped.
 *  - Tuning constants: LAMBDA (smoothness) and GRID_X/GRID_Y (speed/quality).
 */
public class MapDefishV8 {

    // === Tuning constants ===
    static final double LAMBDA = 1e-3;   // increase to reduce ripples (e.g., 5e-3, 1e-2)
    static final int GRID_X = 96;        // inverse grid resolution (higher = sharper, slower precompute)
    static final int GRID_Y = 64;

    static final double[][] PAIRS = new double[][]{
        {0.141667, 0.011667, 0.064443, 0.022556},
        {0.173333, 0.011667, 0.109666, 0.018379},
        {0.216667, 0.008333, 0.166196, 0.012531},
        {0.258333, 0.008333, 0.219811, 0.011740},
        {0.306667, 0.008333, 0.278950, 0.011740},
        {0.351667, 0.008333, 0.337011, 0.011740},
        {0.401667, 0.010000, 0.396108, 0.014227},
        {0.455000, 0.010000, 0.447237, 0.015772},
        {0.500000, 0.010000, 0.499152, 0.017544},
        {0.546667, 0.010000, 0.555450, 0.019316},
        {0.591667, 0.010000, 0.611802, 0.020860},
        {0.633333, 0.010000, 0.668616, 0.022404},
        {0.675000, 0.010000, 0.721650, 0.023949},
        {0.713333, 0.010000, 0.772329, 0.025493},
        {0.756667, 0.010000, 0.829143, 0.027265},
        {0.800000, 0.010000, 0.882908, 0.028810},
        {0.838333, 0.010000, 0.938963, 0.030354},
        {0.881667, 0.010000, 0.994671, 0.031899},
        {0.920000, 0.010000, 1.049172, 0.033443},
        {0.960000, 0.010000, 1.104074, 0.034988},
        {0.140000, 0.045000, 0.061623, 0.051727},
        {0.175000, 0.043333, 0.110425, 0.046651},
        {0.215000, 0.045000, 0.162607, 0.044736},
        {0.256667, 0.041667, 0.213421, 0.041673},
        {0.306667, 0.041667, 0.275932, 0.040656},
        {0.353333, 0.041667, 0.336725, 0.039866},
        {0.401667, 0.043333, 0.395821, 0.041410},
        {0.451667, 0.041667, 0.446349, 0.039638},
        {0.500000, 0.041667, 0.499152, 0.041410},
        {0.545000, 0.041667, 0.553083, 0.042954},
        {0.588333, 0.043333, 0.609033, 0.044726},
        {0.630000, 0.043333, 0.665673, 0.046270},
        {0.675000, 0.043333, 0.721333, 0.047815},
        {0.715000, 0.043333, 0.773447, 0.049359},
        {0.758333, 0.041667, 0.827875, 0.050131},
        {0.801667, 0.043333, 0.882316, 0.051675},
        {0.840000, 0.043333, 0.938116, 0.053447},
        {0.878333, 0.041667, 0.992896, 0.054219},
        {0.915000, 0.041667, 1.047940, 0.055763},
        {0.956667, 0.043333, 1.103003, 0.057308},
        {0.140000, 0.081667, 0.061888, 0.081651},
        {0.180000, 0.081667, 0.112970, 0.081080},
        {0.220000, 0.080000, 0.164920, 0.079525},
        {0.258333, 0.081667, 0.216586, 0.079297},
        {0.303333, 0.080000, 0.275304, 0.078734},
        {0.355000, 0.080000, 0.338898, 0.078380},
        {0.403333, 0.081667, 0.395867, 0.080586},
        {0.451667, 0.081667, 0.446801, 0.080358},
        {0.501667, 0.081667, 0.500000, 0.082813},
        {0.550000, 0.081667, 0.551505, 0.083585},
        {0.590000, 0.083333, 0.606234, 0.085130},
        {0.636667, 0.081667, 0.666154, 0.085902},
        {0.675000, 0.083333, 0.720277, 0.087446},
        {0.711667, 0.083333, 0.771599, 0.088218},
        {0.755000, 0.083333, 0.829296, 0.089990},
        {0.801667, 0.083333, 0.887141, 0.091762},
        {0.840000, 0.081667, 0.939436, 0.092534},
        {0.878333, 0.083333, 0.992544, 0.094078},
        {0.920000, 0.083333, 1.047839, 0.095622},
        {0.961667, 0.080000, 1.103916, 0.096339},
        {0.140000, 0.118333, 0.064284, 0.112939},
        {0.176667, 0.116667, 0.110713, 0.111263},
        {0.216667, 0.118333, 0.166477, 0.110019},
        {0.256667, 0.118333, 0.218219, 0.109370},
        {0.305000, 0.118333, 0.280652, 0.109025},
        {0.351667, 0.116667, 0.338455, 0.107502},
        {0.400000, 0.116667, 0.396628, 0.107274},
        {0.450000, 0.118333, 0.449661, 0.108798},
        {0.501667, 0.118333, 0.504572, 0.110540},
        {0.548333, 0.116667, 0.554027, 0.109314},
        {0.591667, 0.116667, 0.608170, 0.110847},
        {0.633333, 0.118333, 0.664621, 0.112618},
        {0.671667, 0.116667, 0.717812, 0.111873},
        {0.713333, 0.118333, 0.773700, 0.113644},
        {0.753333, 0.118333, 0.828959, 0.115416},
        {0.798333, 0.118333, 0.889058, 0.117415},
        {0.836667, 0.118333, 0.941716, 0.118732},
        {0.875000, 0.118333, 0.995313, 0.120503},
        {0.918333, 0.118333, 1.050756, 0.122275},
        {0.960000, 0.118333, 1.106660, 0.124037},
        {0.141667, 0.151667, 0.066096, 0.144236},
        {0.178333, 0.150000, 0.113922, 0.142254},
        {0.218333, 0.150000, 0.169996, 0.140691},
        {0.260000, 0.151667, 0.223133, 0.140031},
        {0.305000, 0.150000, 0.280661, 0.138497},
        {0.353333, 0.150000, 0.340510, 0.138134},
        {0.401667, 0.150000, 0.397382, 0.138134},
        {0.451667, 0.150000, 0.452354, 0.138134},
        {0.501667, 0.151667, 0.508462, 0.140569},
        {0.550000, 0.151667, 0.559448, 0.142113},
        {0.590000, 0.151667, 0.612187, 0.143657},
        {0.631667, 0.150000, 0.667471, 0.144429},
        {0.670000, 0.150000, 0.719887, 0.145973},
        {0.708333, 0.151667, 0.770736, 0.147517},
        {0.753333, 0.151667, 0.830405, 0.149289},
        {0.793333, 0.151667, 0.883039, 0.151061},
        {0.830000, 0.151667, 0.933857, 0.152605},
        {0.870000, 0.151667, 0.988344, 0.154149},
        {0.905000, 0.151667, 1.038933, 0.155694},
        {0.943333, 0.153333, 1.094089, 0.158132},
        {0.980000, 0.151667, 1.146243, 0.158928},
        {0.141667, 0.186667, 0.066648, 0.175463},
        {0.180000, 0.186667, 0.116312, 0.173728},
        {0.221667, 0.186667, 0.173628, 0.172018},
        {0.258333, 0.185000, 0.223623, 0.169196},
        {0.308333, 0.186667, 0.286187, 0.169210},
        {0.351667, 0.186667, 0.341330, 0.169973},
        {0.398333, 0.185000, 0.396429, 0.168267},
        {0.450000, 0.186667, 0.452600, 0.170757},
        {0.501667, 0.186667, 0.512284, 0.173225},
        {0.550000, 0.186667, 0.565271, 0.174765},
        {0.593333, 0.186667, 0.619095, 0.176305},
        {0.635000, 0.185000, 0.673611, 0.176297},
        {0.675000, 0.186667, 0.726026, 0.177841},
        {0.711667, 0.188333, 0.777301, 0.179385},
        {0.751667, 0.186667, 0.827318, 0.179376},
        {0.795000, 0.186667, 0.885627, 0.181148},
        {0.833333, 0.186667, 0.940585, 0.182692},
        {0.876667, 0.185000, 0.998277, 0.184466},
        {0.911667, 0.186667, 1.046651, 0.185254},
        {0.951667, 0.185000, 1.102022, 0.187718},
        {0.985000, 0.185000, 1.152262, 0.188511},
        {0.143333, 0.220000, 0.069949, 0.205210},
        {0.178333, 0.220000, 0.117813, 0.203207},
        {0.220000, 0.221667, 0.174630, 0.201813},
        {0.256667, 0.220000, 0.226343, 0.200020},
        {0.306667, 0.220000, 0.285763, 0.198722},
        {0.351667, 0.220000, 0.344708, 0.197922},
        {0.401667, 0.220000, 0.400168, 0.197311},
        {0.451667, 0.220000, 0.453197, 0.198810},
        {0.500000, 0.220000, 0.511675, 0.201077},
        {0.548333, 0.220000, 0.564788, 0.202611},
        {0.590000, 0.220000, 0.615658, 0.204155},
        {0.633333, 0.221667, 0.670405, 0.206693},
        {0.673333, 0.220000, 0.723734, 0.207455},
        {0.711667, 0.220000, 0.775476, 0.208999},
        {0.751667, 0.221667, 0.827645, 0.210771},
        {0.798333, 0.220000, 0.890595, 0.213024},
        {0.833333, 0.220000, 0.938587, 0.212443},
        {0.875000, 0.218333, 0.993209, 0.213983},
        {0.916667, 0.220000, 1.046419, 0.215527},
        {0.953333, 0.220000, 1.099981, 0.217071},
        {0.986667, 0.220000, 1.151530, 0.218606},
        {0.140000, 0.253333, 0.067425, 0.235228},
        {0.178333, 0.253333, 0.116525, 0.232395},
        {0.218333, 0.255000, 0.173158, 0.232180},
        {0.256667, 0.253333, 0.226308, 0.230363},
        {0.303333, 0.253333, 0.282786, 0.229449},
        {0.350000, 0.251667, 0.341850, 0.228652},
        {0.400000, 0.253333, 0.398319, 0.230171},
        {0.451667, 0.253333, 0.454321, 0.231705},
        {0.500000, 0.253333, 0.510825, 0.234173},
        {0.548333, 0.253333, 0.563334, 0.235707},
        {0.591667, 0.251667, 0.615820, 0.236494},
        {0.628333, 0.253333, 0.666808, 0.239732},
        {0.673333, 0.253333, 0.723967, 0.241274},
        {0.711667, 0.255000, 0.777703, 0.242808},
        {0.755000, 0.255000, 0.837176, 0.245276},
        {0.796667, 0.255000, 0.891384, 0.246037},
        {0.836667, 0.255000, 0.940703, 0.247581},
        {0.875000, 0.255000, 0.994278, 0.249353},
        {0.913333, 0.255000, 1.046036, 0.250897},
        {0.953333, 0.255000, 1.101932, 0.253365},
        {0.985000, 0.255000, 1.152194, 0.254157},
        {0.140000, 0.286667, 0.065640, 0.264218},
        {0.176667, 0.286667, 0.110555, 0.262736},
        {0.216667, 0.286667, 0.166940, 0.262546},
        {0.258333, 0.286667, 0.221565, 0.262128},
        {0.306667, 0.286667, 0.283974, 0.261708},
        {0.350000, 0.285000, 0.341218, 0.260919},
        {0.398333, 0.286667, 0.401357, 0.263195},
        {0.448333, 0.286667, 0.456741, 0.264739},
        {0.500000, 0.286667, 0.512535, 0.267198},
        {0.548333, 0.286667, 0.565271, 0.268742},
        {0.591667, 0.286667, 0.618393, 0.270286},
        {0.633333, 0.286667, 0.672871, 0.272058},
        {0.670000, 0.286667, 0.723589, 0.272829},
        {0.711667, 0.286667, 0.778040, 0.274373},
        {0.750000, 0.286667, 0.830668, 0.276145},
        {0.796667, 0.286667, 0.893351, 0.278385},
        {0.838333, 0.288333, 0.945085, 0.279929},
        {0.875000, 0.286667, 0.995857, 0.280701},
        {0.911667, 0.286667, 1.046810, 0.282245},
        {0.951667, 0.286667, 1.102763, 0.284014},
        {0.985000, 0.286667, 1.152491, 0.284807},
        {0.140000, 0.321667, 0.063154, 0.295021},
        {0.178333, 0.320000, 0.114416, 0.293720},
        {0.220000, 0.320000, 0.173191, 0.293510},
        {0.260000, 0.320000, 0.229170, 0.293087},
        {0.305000, 0.321667, 0.288784, 0.294067},
        {0.353333, 0.321667, 0.346897, 0.294611},
        {0.400000, 0.321667, 0.404775, 0.295846},
        {0.451667, 0.321667, 0.459704, 0.297395},
        {0.500000, 0.321667, 0.513610, 0.299157},
        {0.548333, 0.321667, 0.566411, 0.300701},
        {0.590000, 0.321667, 0.617547, 0.302245},
        {0.630000, 0.321667, 0.670867, 0.304236},
        {0.668333, 0.321667, 0.721936, 0.305007},
        {0.711667, 0.321667, 0.780397, 0.307231},
        {0.751667, 0.321667, 0.835893, 0.308775},
        {0.795000, 0.321667, 0.895239, 0.310547},
        {0.833333, 0.321667, 0.947657, 0.312091},
        {0.875000, 0.321667, 0.998993, 0.313636},
        {0.915000, 0.320000, 1.049498, 0.313408},
        {0.953333, 0.321667, 1.100897, 0.315180},
        {0.985000, 0.321667, 1.151602, 0.315972},
        {0.140000, 0.356667, 0.063898, 0.326199},
        {0.178333, 0.358333, 0.115836, 0.327733},
        {0.220000, 0.358333, 0.175112, 0.328494},
        {0.258333, 0.356667, 0.230785, 0.327495},
        {0.305000, 0.356667, 0.291073, 0.327833},
        {0.351667, 0.356667, 0.349510, 0.327878},
        {0.401667, 0.356667, 0.407881, 0.329638},
        {0.451667, 0.356667, 0.463586, 0.331171},
        {0.501667, 0.356667, 0.516321, 0.332707},
        {0.546667, 0.356667, 0.568435, 0.334250},
        {0.591667, 0.356667, 0.621596, 0.336018},
        {0.630000, 0.358333, 0.670469, 0.337559},
        {0.670000, 0.358333, 0.723365, 0.339100},
        {0.708333, 0.356667, 0.776248, 0.338775},
        {0.750000, 0.358333, 0.831305, 0.340779},
        {0.796667, 0.358333, 0.893455, 0.343027},
        {0.838333, 0.356667, 0.945124, 0.343799},
        {0.875000, 0.356667, 0.997143, 0.345571},
        {0.911667, 0.356667, 1.049086, 0.347115},
        {0.953333, 0.356667, 1.103884, 0.349639},
        {0.985000, 0.356667, 1.153544, 0.350431},
        {0.140000, 0.390000, 0.063576, 0.356190},
        {0.178333, 0.390000, 0.116705, 0.357924},
        {0.218333, 0.390000, 0.173810, 0.359658},
        {0.258333, 0.390000, 0.232980, 0.361619},
        {0.303333, 0.390000, 0.291842, 0.361613},
        {0.350000, 0.391667, 0.350289, 0.363151},
        {0.400000, 0.391667, 0.407522, 0.364686},
        {0.451667, 0.391667, 0.464174, 0.366221},
        {0.500000, 0.391667, 0.518329, 0.368434},
        {0.546667, 0.391667, 0.569472, 0.369205},
        {0.591667, 0.391667, 0.622980, 0.371745},
        {0.633333, 0.391667, 0.671934, 0.372516},
        {0.670000, 0.391667, 0.724232, 0.374060},
        {0.711667, 0.391667, 0.780416, 0.376504},
        {0.751667, 0.391667, 0.833205, 0.378269},
        {0.796667, 0.391667, 0.892982, 0.380731},
        {0.835000, 0.391667, 0.943867, 0.380928},
        {0.875000, 0.391667, 0.996132, 0.382700},
        {0.915000, 0.391667, 1.047146, 0.384244},
        {0.953333, 0.391667, 1.099803, 0.385016},
        {0.985000, 0.390000, 1.150712, 0.385808},
        {0.141667, 0.425000, 0.066472, 0.387199},
        {0.178333, 0.423333, 0.116791, 0.386606},
        {0.220000, 0.423333, 0.176622, 0.387784},
        {0.258333, 0.423333, 0.235767, 0.389283},
        {0.306667, 0.423333, 0.298928, 0.390053},
        {0.351667, 0.423333, 0.354870, 0.390028},
        {0.401667, 0.425000, 0.412012, 0.392277},
        {0.451667, 0.423333, 0.466399, 0.392269},
        {0.500000, 0.425000, 0.521440, 0.394734},
        {0.546667, 0.423333, 0.572072, 0.394505},
        {0.591667, 0.423333, 0.623430, 0.395275},
        {0.635000, 0.423333, 0.677701, 0.397047},
        {0.673333, 0.423333, 0.728375, 0.397809},
        {0.710000, 0.423333, 0.778428, 0.398580},
        {0.753333, 0.425000, 0.835932, 0.401812},
        {0.795000, 0.425000, 0.892486, 0.404265},
        {0.835000, 0.425000, 0.945664, 0.406036},
        {0.875000, 0.425000, 0.998366, 0.407808},
        {0.915000, 0.423333, 1.050362, 0.409352},
        {0.955000, 0.425000, 1.104614, 0.412604},
        {0.985000, 0.421667, 1.152404, 0.411848},
        {0.140000, 0.456667, 0.063657, 0.416205},
        {0.176667, 0.456667, 0.112973, 0.415619},
        {0.216667, 0.456667, 0.168086, 0.415409},
        {0.256667, 0.455000, 0.224205, 0.415773},
        {0.305000, 0.456667, 0.284277, 0.416743},
        {0.353333, 0.456667, 0.345405, 0.418956},
        {0.401667, 0.456667, 0.405873, 0.420498},
        {0.451667, 0.456667, 0.464715, 0.422026},
        {0.500000, 0.456667, 0.520453, 0.423770},
        {0.546667, 0.456667, 0.573593, 0.425305},
        {0.590000, 0.456667, 0.624586, 0.426077},
        {0.633333, 0.456667, 0.677718, 0.428547},
        {0.675000, 0.456667, 0.731454, 0.430081},
        {0.711667, 0.458333, 0.782495, 0.431625},
        {0.751667, 0.456667, 0.832801, 0.432397},
        {0.798333, 0.456667, 0.896074, 0.435621},
        {0.835000, 0.456667, 0.947917, 0.436392},
        {0.875000, 0.456667, 0.998870, 0.437936},
        {0.915000, 0.456667, 1.050318, 0.439480},
        {0.955000, 0.456667, 1.103419, 0.440252},
        {0.986667, 0.456667, 1.153980, 0.441044},
        {0.141667, 0.491667, 0.066832, 0.446435},
        {0.180000, 0.491667, 0.118145, 0.447977},
        {0.218333, 0.491667, 0.175552, 0.449509},
        {0.258333, 0.490000, 0.232772, 0.449875},
        {0.301667, 0.490000, 0.288645, 0.448885},
        {0.350000, 0.490000, 0.350051, 0.450404},
        {0.400000, 0.491667, 0.409458, 0.451938},
        {0.450000, 0.491667, 0.466834, 0.453471},
        {0.500000, 0.491667, 0.525931, 0.456940},
        {0.548333, 0.491667, 0.578970, 0.458474},
        {0.591667, 0.491667, 0.630594, 0.459245},
        {0.633333, 0.493333, 0.682797, 0.461707},
        {0.671667, 0.491667, 0.734861, 0.463249},
        {0.711667, 0.493333, 0.788135, 0.465703},
        {0.753333, 0.493333, 0.842824, 0.468158},
        {0.795000, 0.493333, 0.897117, 0.470612},
        {0.835000, 0.491667, 0.948713, 0.470600},
        {0.875000, 0.491667, 1.000619, 0.472372},
        {0.916667, 0.491667, 1.054265, 0.474144},
        {0.955000, 0.491667, 1.105856, 0.474916},
        {0.986667, 0.493333, 1.156245, 0.477402},
        {0.143333, 0.525000, 0.069229, 0.475428},
        {0.176667, 0.525000, 0.114947, 0.475430},
        {0.218333, 0.525000, 0.175587, 0.477169},
        {0.256667, 0.525000, 0.232137, 0.477535},
        {0.305000, 0.525000, 0.292063, 0.478513},
        {0.350000, 0.526667, 0.350977, 0.480047},
        {0.401667, 0.525000, 0.412370, 0.480816},
        {0.448333, 0.525000, 0.466112, 0.481588},
        {0.500000, 0.525000, 0.528914, 0.485050},
        {0.548333, 0.525000, 0.582431, 0.486584},
        {0.591667, 0.525000, 0.634024, 0.487355},
        {0.633333, 0.526667, 0.688293, 0.490597},
        {0.673333, 0.525000, 0.739569, 0.491358},
        {0.708333, 0.525000, 0.787607, 0.490779},
        {0.750000, 0.526667, 0.842929, 0.493234},
        {0.793333, 0.525000, 0.896391, 0.494776},
        {0.835000, 0.523333, 0.945739, 0.494189},
        {0.876667, 0.525000, 1.000436, 0.496733},
        {0.916667, 0.523333, 1.052716, 0.497285},
        {0.953333, 0.523333, 1.103026, 0.496488},
        {0.985000, 0.525000, 1.153744, 0.497280},
        {0.140000, 0.556667, 0.067950, 0.504421},
        {0.176667, 0.556667, 0.114363, 0.504413},
        {0.218333, 0.556667, 0.176337, 0.506922},
        {0.258333, 0.555000, 0.236561, 0.507268},
        {0.305000, 0.556667, 0.296214, 0.508235},
        {0.351667, 0.556667, 0.353862, 0.508811},
        {0.400000, 0.558333, 0.414949, 0.511258},
        {0.451667, 0.558333, 0.473001, 0.512785},
        {0.500000, 0.556667, 0.528725, 0.512983},
        {0.546667, 0.556667, 0.576182, 0.513763},
        {0.591667, 0.556667, 0.629763, 0.516198},
        {0.635000, 0.558333, 0.684659, 0.518647},
        {0.670000, 0.556667, 0.730120, 0.518235},
        {0.706667, 0.558333, 0.779262, 0.518997},
        {0.750000, 0.556667, 0.836505, 0.521460},
        {0.796667, 0.556667, 0.896958, 0.523699},
        {0.836667, 0.558333, 0.947560, 0.525471},
        {0.875000, 0.558333, 0.998799, 0.527242},
        {0.915000, 0.556667, 1.047273, 0.527812},
        {0.951667, 0.558333, 1.102244, 0.530274},
        {0.985000, 0.556667, 1.154033, 0.531066},
        {0.140000, 0.591667, 0.069090, 0.534179},
        {0.180000, 0.590000, 0.119850, 0.534163},
        {0.216667, 0.591667, 0.174108, 0.534918},
        {0.258333, 0.590000, 0.234054, 0.535271},
        {0.303333, 0.591667, 0.296085, 0.536249},
        {0.351667, 0.591667, 0.355888, 0.537468},
        {0.403333, 0.591667, 0.417002, 0.539217},
        {0.451667, 0.591667, 0.472740, 0.540748},
        {0.503333, 0.591667, 0.532997, 0.543982},
        {0.548333, 0.590000, 0.582790, 0.544743},
        {0.593333, 0.590000, 0.636438, 0.547197},
        {0.633333, 0.590000, 0.685441, 0.548736},
        {0.671667, 0.591667, 0.734331, 0.550280},
        {0.713333, 0.590000, 0.789177, 0.552734},
        {0.755000, 0.591667, 0.843803, 0.555188},
        {0.795000, 0.591667, 0.896780, 0.556732},
        {0.833333, 0.590000, 0.947772, 0.557504},
        {0.875000, 0.590000, 0.999035, 0.559276},
        {0.915000, 0.591667, 1.049323, 0.560819},
        {0.955000, 0.601667, 1.102164, 0.566358},
        {0.986667, 0.590000, 1.153773, 0.562100},
        {0.141667, 0.626667, 0.068289, 0.564163},
        {0.176667, 0.623333, 0.115103, 0.561771},
        {0.218333, 0.625000, 0.176833, 0.564960},
        {0.256667, 0.623333, 0.232214, 0.565317},
        {0.305000, 0.625000, 0.293411, 0.567045},
        {0.351667, 0.623333, 0.352090, 0.567392},
        {0.401667, 0.626667, 0.413908, 0.570617},
        {0.450000, 0.625000, 0.469758, 0.572159},
        {0.500000, 0.625000, 0.527619, 0.574615},
        {0.548333, 0.625000, 0.583024, 0.575388},
        {0.590000, 0.626667, 0.635209, 0.576930},
        {0.631667, 0.626667, 0.686107, 0.578472},
        {0.671667, 0.626667, 0.738927, 0.581708},
        {0.711667, 0.626667, 0.791570, 0.585708},
        {0.750000, 0.625000, 0.838296, 0.587246},
        {0.793333, 0.625000, 0.893673, 0.590480},
        {0.836667, 0.625000, 0.949225, 0.594494},
        {0.876667, 0.623333, 1.001885, 0.596268},
        {0.916667, 0.625000, 1.051528, 0.596837},
        {0.953333, 0.625000, 1.102799, 0.598378},
        {0.985000, 0.625000, 1.151435, 0.598398},
        {0.141667, 0.660000, 0.069277, 0.593150},
        {0.181667, 0.661667, 0.121696, 0.596378},
        {0.221667, 0.660000, 0.176707, 0.595381},
        {0.258333, 0.661667, 0.232390, 0.595736},
        {0.305000, 0.661667, 0.292924, 0.596701},
        {0.351667, 0.661667, 0.351712, 0.596933},
        {0.398333, 0.661667, 0.408689, 0.598472},
        {0.451667, 0.663333, 0.469923, 0.602501},
        {0.500000, 0.661667, 0.528162, 0.603259},
        {0.545000, 0.661667, 0.575550, 0.603259},
        {0.591667, 0.661667, 0.631086, 0.605717},
        {0.631667, 0.661667, 0.684838, 0.607255},
        {0.671667, 0.663333, 0.739347, 0.610494},
        {0.708333, 0.663333, 0.790470, 0.611265},
        {0.750000, 0.663333, 0.846218, 0.614502},
        {0.795000, 0.663333, 0.904553, 0.617729},
        {0.836667, 0.663333, 0.956072, 0.619272},
        {0.873333, 0.663333, 1.003780, 0.619276},
        {0.916667, 0.661667, 1.054131, 0.621044},
        {0.956667, 0.661667, 1.103636, 0.621807},
        {0.985000, 0.661667, 1.154390, 0.624271},
        {0.145000, 0.693333, 0.074413, 0.621346},
        {0.178333, 0.695000, 0.118133, 0.623084},
        {0.220000, 0.695000, 0.176025, 0.624840},
        {0.260000, 0.695000, 0.232398, 0.625604},
        {0.306667, 0.695000, 0.293000, 0.627156},
        {0.350000, 0.695000, 0.350263, 0.627144},
        {0.398333, 0.696667, 0.412161, 0.631173},
        {0.451667, 0.696667, 0.473139, 0.634410},
        {0.503333, 0.695000, 0.534162, 0.636868},
        {0.548333, 0.696667, 0.584932, 0.637628},
        {0.593333, 0.695000, 0.636001, 0.637843},
        {0.635000, 0.695000, 0.688194, 0.639384},
        {0.671667, 0.695000, 0.738260, 0.639383},
        {0.708333, 0.695000, 0.789592, 0.641928},
        {0.751667, 0.695000, 0.848391, 0.645939},
        {0.793333, 0.695000, 0.902446, 0.647700},
        {0.835000, 0.695000, 0.954286, 0.649471},
        {0.876667, 0.693333, 1.006097, 0.651244},
        {0.916667, 0.695000, 1.054509, 0.651798},
        {0.951667, 0.696667, 1.101594, 0.653338},
        {0.986667, 0.695000, 1.152172, 0.656609},
        {0.141667, 0.728333, 0.068154, 0.650350},
        {0.176667, 0.728333, 0.115903, 0.651888},
        {0.220000, 0.726667, 0.176834, 0.654382},
        {0.256667, 0.726667, 0.231826, 0.654740},
        {0.306667, 0.728333, 0.295059, 0.657184},
        {0.351667, 0.726667, 0.353093, 0.657409},
        {0.400000, 0.726667, 0.412862, 0.659157},
        {0.451667, 0.728333, 0.474605, 0.662395},
        {0.501667, 0.730000, 0.536071, 0.667691},
        {0.548333, 0.726667, 0.586517, 0.667894},
        {0.590000, 0.728333, 0.637409, 0.669435},
        {0.630000, 0.726667, 0.690520, 0.670975},
        {0.671667, 0.726667, 0.744329, 0.673437},
        {0.711667, 0.728333, 0.799190, 0.676677},
        {0.750000, 0.728333, 0.849429, 0.676688},
        {0.795000, 0.726667, 0.907684, 0.679922},
        {0.835000, 0.728333, 0.959846, 0.681457},
        {0.878333, 0.728333, 1.013066, 0.683000},
        {0.915000, 0.728333, 1.061566, 0.683554},
        {0.955000, 0.728333, 1.109454, 0.684326},
        {0.986667, 0.728333, 1.159689, 0.685119},
        {0.145000, 0.760000, 0.073505, 0.678561},
        {0.180000, 0.760000, 0.121803, 0.680102},
        {0.220000, 0.761667, 0.179495, 0.684111},
        {0.260000, 0.760000, 0.235355, 0.684104},
        {0.306667, 0.761667, 0.296167, 0.685639},
        {0.350000, 0.760000, 0.353317, 0.685859},
        {0.400000, 0.761667, 0.414645, 0.688401},
        {0.450000, 0.760000, 0.470333, 0.689933},
        {0.505000, 0.760000, 0.532572, 0.694446},
        {0.546667, 0.760000, 0.584533, 0.693862},
        {0.590000, 0.761667, 0.639317, 0.696308},
        {0.630000, 0.761667, 0.690459, 0.696312},
        {0.673333, 0.761667, 0.747407, 0.699549},
        {0.711667, 0.761667, 0.797139, 0.700321},
        {0.750000, 0.763333, 0.851852, 0.702779},
        {0.796667, 0.761667, 0.911754, 0.706786},
        {0.835000, 0.761667, 0.962603, 0.708328},
        {0.875000, 0.761667, 1.011678, 0.708328},
        {0.911667, 0.761667, 1.058153, 0.708332},
        {0.951667, 0.761667, 1.106613, 0.709875},
        {0.986667, 0.761667, 1.156019, 0.712343},
        {0.145000, 0.795000, 0.073881, 0.708544},
        {0.181667, 0.793333, 0.124096, 0.708732},
        {0.220000, 0.793333, 0.177938, 0.708730},
        {0.260000, 0.795000, 0.235684, 0.710264},
        {0.305000, 0.793333, 0.294580, 0.710472},
        {0.351667, 0.793333, 0.352990, 0.710488},
        {0.400000, 0.795000, 0.412751, 0.712230},
        {0.451667, 0.795000, 0.473273, 0.715468},
        {0.503333, 0.795000, 0.533130, 0.716231},
        {0.548333, 0.795000, 0.585293, 0.717002},
        {0.591667, 0.795000, 0.639388, 0.718538},
        {0.633333, 0.793333, 0.690733, 0.718543},
        {0.671667, 0.795000, 0.744622, 0.720315},
        {0.710000, 0.795000, 0.795587, 0.721855},
        {0.750000, 0.795000, 0.848709, 0.724311},
        {0.791667, 0.793333, 0.900626, 0.724315},
        {0.833333, 0.795000, 0.952226, 0.725085},
        {0.876667, 0.795000, 1.005656, 0.727546},
        {0.916667, 0.795000, 1.054483, 0.728307},
        {0.955000, 0.795000, 1.105074, 0.729079},
        {0.986667, 0.793333, 1.153869, 0.729879},
        {0.143333, 0.828333, 0.071778, 0.737556},
        {0.178333, 0.828333, 0.119879, 0.739071},
        {0.216667, 0.828333, 0.173805, 0.739855},
        {0.256667, 0.830000, 0.232784, 0.743842},
        {0.305000, 0.830000, 0.294173, 0.745389},
        {0.350000, 0.830000, 0.351362, 0.745617},
        {0.401667, 0.830000, 0.415031, 0.748048},
        {0.450000, 0.831667, 0.472377, 0.750495},
        {0.500000, 0.830000, 0.530274, 0.752248},
        {0.545000, 0.830000, 0.579515, 0.751660},
        {0.590000, 0.831667, 0.636090, 0.754888},
        {0.635000, 0.831667, 0.690095, 0.756428},
        {0.673333, 0.830000, 0.745047, 0.758872},
        {0.711667, 0.830000, 0.799622, 0.760416},
        {0.753333, 0.833333, 0.857602, 0.763646},
        {0.796667, 0.833333, 0.913633, 0.766874},
        {0.835000, 0.831667, 0.964917, 0.767645},
        {0.875000, 0.831667, 1.015379, 0.768417},
        {0.913333, 0.830000, 1.062778, 0.767826},
        {0.955000, 0.831667, 1.112418, 0.770296},
        {0.986667, 0.831667, 1.161424, 0.772766}
    };

    public static void main(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println("Usage: java HemiCloneLite <inputImage> <outputPng>");
            return;
        }
        String inPath = args[0];
        String outPath = args[1];

        BufferedImage src = ImageIO.read(new File(inPath));
        if (src == null) throw new IOException("Failed to read input image: " + inPath);
        int outW = src.getWidth();
        int outH = src.getHeight();

        // Build pairs list from embedded table
        List<Pair> pairs = new ArrayList<>();
        for (double[] p : PAIRS) pairs.add(new Pair(p[0], p[1], p[2], p[3]));
        if (pairs.isEmpty()) throw new IllegalStateException("No embedded landmark pairs.");

        // Fit forward (src->dst) and inverse (dst->src) TPS
        ThinPlateSpline2D tpsDstToSrc = ThinPlateSpline2D.fit(
                pairs.stream().map(pp -> new double[]{pp.dx, pp.dy}).toArray(double[][]::new),
                pairs.stream().mapToDouble(pp -> pp.sx).toArray(),
                pairs.stream().mapToDouble(pp -> pp.sy).toArray(),
                LAMBDA
        );

        // Precompute inverse grid (dst->src)
        InverseGrid grid = InverseGrid.build(tpsDstToSrc, GRID_X, GRID_Y);

        // Warp with bilinear sampling; edge clamp background
        BufferedImage out = new BufferedImage(outW, outH, BufferedImage.TYPE_INT_ARGB);
        Sampler sampler = new Sampler(src);

        for (int y = 0; y < outH; y++) {
            double yn = (outH == 1) ? 0.0 : (y / (double)(outH - 1));
            for (int x = 0; x < outW; x++) {
                double xn = (outW == 1) ? 0.0 : (x / (double)(outW - 1));
                double[] sN = grid.map(xn, yn);         // normalized source
                double sx = sN[0] * (src.getWidth() - 1);
                double sy = sN[1] * (src.getHeight() - 1);
                int rgba = sampler.sampleBilinearRGBA(sx, sy);
                out.setRGB(x, y, rgba);
            }
        }
        ImageIO.write(out, "png", new File(outPath));
        System.out.println("Wrote: " + outPath);
    }

    // --- Data structures ---
    static class Pair {
        final double sx, sy; // source normalized
        final double dx, dy; // dest   normalized
        Pair(double sx, double sy, double dx, double dy) {
            this.sx=sx; this.sy=sy; this.dx=dx; this.dy=dy;
        }
    }

    // --- Thin Plate Spline (2D) with simple regularization ---
    static class ThinPlateSpline2D {
        private final double[][] pts; // N x 2
        private final double[] wX;    // N+3
        private final double[] wY;    // N+3
        private ThinPlateSpline2D(double[][] pts, double[] wX, double[] wY) {
            this.pts=pts; this.wX=wX; this.wY=wY;
        }
        static ThinPlateSpline2D fit(double[][] srcPts, double[] dstX, double[] dstY, double lambda) {
            int N = srcPts.length;
            int M = N + 3;
            double[][] A = new double[M][M];

            // K block
            for (int i=0;i<N;i++) {
                A[i][i] = lambda;
                for (int j=i+1;j<N;j++) {
                    double r = dist(srcPts[i], srcPts[j]);
                    double u = U(r);
                    A[i][j]=u; A[j][i]=u;
                }
            }
            // P and P^T
            for (int i=0;i<N;i++) {
                double x=srcPts[i][0], y=srcPts[i][1];
                A[i][N+0]=1.0; A[i][N+1]=x;  A[i][N+2]=y;
                A[N+0][i]=1.0; A[N+1][i]=x;  A[N+2][i]=y;
            }

            double[] bx = new double[M];
            double[] by = new double[M];
            for (int i=0;i<N;i++) { bx[i]=dstX[i]; by[i]=dstY[i]; }

            double[] wx = solve(A, bx);
            double[] wy = solve(A, by);
            return new ThinPlateSpline2D(srcPts, wx, wy);
        }
        double[] map(double x, double y) {
            int N = pts.length;
            double fx = wX[N+0] + wX[N+1]*x + wX[N+2]*y;
            double fy = wY[N+0] + wY[N+1]*x + wY[N+2]*y;
            for (int i=0;i<N;i++) {
                double u = U(dist2(x,y, pts[i][0], pts[i][1]));
                fx += wX[i]*u; fy += wY[i]*u;
            }
            return new double[]{fx, fy};
        }
        private static double dist(double[] a, double[] b) { double dx=a[0]-b[0], dy=a[1]-b[1]; return Math.sqrt(dx*dx+dy*dy); }
        private static double dist2(double x1,double y1,double x2,double y2) { double dx=x1-x2, dy=y1-y2; return Math.sqrt(dx*dx+dy*dy); }
        private static double U(double r) {
            if (r <= 1e-12) return 0.0;
            double r2=r*r; return r2*Math.log(r2);
        }
        private static double[] solve(double[][] A, double[] b) {
            int n=b.length;
            double[][] M=new double[n][n+1];
            for(int i=0;i<n;i++){ System.arraycopy(A[i],0,M[i],0,n); M[i][n]=b[i]; }
            for(int p=0;p<n;p++) {
                int max=p; double vmax=Math.abs(M[p][p]);
                for(int r=p+1;r<n;r++){ double v=Math.abs(M[r][p]); if(v>vmax){vmax=v; max=r;} }
                if (Math.abs(M[max][p])<1e-18) throw new RuntimeException("Singular matrix");
                if (max!=p) { double[] tmp=M[p]; M[p]=M[max]; M[max]=tmp; }
                double pivot=M[p][p];
                for(int c=p;c<=n;c++) M[p][c]/=pivot;
                for(int r=0;r<n;r++) if(r!=p) {
                    double f=M[r][p];
                    if(f!=0.0) for(int c=p;c<=n;c++) M[r][c]-=f*M[p][c];
                }
            }
            double[] x=new double[n];
            for(int i=0;i<n;i++) x[i]=M[i][n];
            return x;
        }
    }

    // --- Inverse mapping grid (dst -> src) ---
    static class InverseGrid {
        final int gx, gy;
        final double[][] sx, sy;
        private InverseGrid(int gx,int gy) { this.gx=gx; this.gy=gy; sx=new double[gy][gx]; sy=new double[gy][gx]; }
        static InverseGrid build(ThinPlateSpline2D inv,int gx,int gy) {
            InverseGrid g=new InverseGrid(gx,gy);
            for(int j=0;j<gy;j++) {
                double yn=(gy==1)?0.0:(j/(double)(gy-1));
                for(int i=0;i<gx;i++) {
                    double xn=(gx==1)?0.0:(i/(double)(gx-1));
                    double[] s=inv.map(xn,yn);
                    g.sx[j][i]=s[0]; g.sy[j][i]=s[1];
                }
            }
            return g;
        }
        double[] map(double xn,double yn) {
            double fx=(gx-1)*xn, fy=(gy-1)*yn;
            int x0=clamp((int)Math.floor(fx),0,gx-2), y0=clamp((int)Math.floor(fy),0,gy-2);
            double tx=fx-x0, ty=fy-y0;
            double s00x=sx[y0][x0], s10x=sx[y0][x0+1], s01x=sx[y0+1][x0], s11x=sx[y0+1][x0+1];
            double s00y=sy[y0][x0], s10y=sy[y0][x0+1], s01y=sy[y0+1][x0], s11y=sy[y0+1][x0+1];
            double sxI=lerp(lerp(s00x,s10x,tx), lerp(s01x,s11x,tx), ty);
            double syI=lerp(lerp(s00y,s10y,tx), lerp(s01y,s11y,tx), ty);
            return new double[]{sxI, syI};
        }
        private static int clamp(int v,int lo,int hi) { return (v<lo)?lo:(v>hi)?hi:v; }
        private static double lerp(double a,double b,double t) { return a+(b-a)*t; }
    }

    // --- Image sampling (edge clamp, bilinear) ---
    static class Sampler {
        final BufferedImage img;
        Sampler(BufferedImage img) { this.img=img; }
        int sampleBilinearRGBA(double x,double y) {
            int w=img.getWidth(), h=img.getHeight();
            x = (x<0)?0: (x> w-1)? (w-1): x;
            y = (y<0)?0: (y> h-1)? (h-1): y;
            int x0=(int)Math.floor(x), y0=(int)Math.floor(y);
            int x1=Math.min(x0+1, w-1), y1=Math.min(y0+1, h-1);
            double tx=x-x0, ty=y-y0;
            int c00=img.getRGB(x0,y0), c10=img.getRGB(x1,y0), c01=img.getRGB(x0,y1), c11=img.getRGB(x1,y1);
            double[] a=rgba(c00), b=rgba(c10), c=rgba(c01), d=rgba(c11);
            double[] top=mix(a,b,tx), bot=mix(c,d,tx), m=mix(top,bot,ty);
            int A=(int)clamp(Math.round(m[0]),0,255), R=(int)clamp(Math.round(m[1]),0,255), G=(int)clamp(Math.round(m[2]),0,255), B=(int)clamp(Math.round(m[3]),0,255);
            return (A<<24)|(R<<16)|(G<<8)|B;
        }
        private static double[] rgba(int c) { return new double[]{(c>>>24)&0xFF, (c>>>16)&0xFF, (c>>>8)&0xFF, c&0xFF}; }
        private static double[] mix(double[] a,double[] b,double t) { return new double[]{a[0]+(b[0]-a[0])*t, a[1]+(b[1]-a[1])*t, a[2]+(b[2]-a[2])*t, a[3]+(b[3]-a[3])*t}; }
        private static double clamp(double v,double lo,double hi) { return v<lo?lo: Math.min(v,hi); }
    }
}
